can do very basic (and very slow) simulations in multiple dimensions, but basically just limited to difusion and advection right now

    

need to figure out how to make defining kernels straightforward, possibilities:

    start with derivative order and right/left/center --> produces kernel
    center_idx can be 1/2 for C->E (then what about E->C)
        dictionary instead?
    use whatever's behind https://web.media.mit.edu/~crtaylor/calculator.html specify locations, it returns weights
        would also have to specify E->C or C->E 
            use values mod 0.5 instead? (ignore distinction between E->C and C->E)
        very straightforward, done in mar572 BUT not sure how this extends for E->C or C->E


assuming this works, kernel input can just be the derivative order and the index locations, no axis or domain
    indices would have to be all integers or all integers+1/2

methods for initial conditions and boundary conditions which would call set_expression


allow to get data based on coordinate instead of index

check variables in expression for set_expression --> better error messages for invalid expression

good visualization of fields

more consistent/better naming
    values instead of data
    used dim and axes interchangably 

